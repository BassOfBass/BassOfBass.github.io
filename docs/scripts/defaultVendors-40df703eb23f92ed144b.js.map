{"version":3,"sources":["webpack://landing-page/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://landing-page/./node_modules/nanoid/index.js","webpack://landing-page/./node_modules/nanoid/url-alphabet/index.js","webpack://landing-page/./node_modules/prismjs/components/prism-clike.js","webpack://landing-page/./node_modules/prismjs/components/prism-core.js","webpack://landing-page/./node_modules/prismjs/components/prism-css.js","webpack://landing-page/./node_modules/prismjs/components/prism-javascript.js","webpack://landing-page/./node_modules/prismjs/components/prism-markup.js","webpack://landing-page/./node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js"],"names":["_classCallCheck","instance","Constructor","TypeError","pool","poolOffset","nanoid","size","bytes","length","Buffer","allocUnsafe","res","subarray","random","id","Prism","languages","clike","pattern","lookbehind","greedy","inside","_self","lang","uniqueId","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","key","hasOwnProperty","forEach","v","i","getLanguage","element","test","className","parentElement","match","toLowerCase","currentScript","document","Error","err","src","exec","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","classList","contains","extend","redef","insertBefore","before","insert","root","grammar","ret","token","newToken","old","DFS","this","callback","property","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","language","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","highlight","text","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","list","array","node","next","tail","push","toArray","all","add","name","callbacks","matchedStr","matchPattern","pos","lastIndex","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","global","flags","RegExp","source","currentNode","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","newNode","count","s","e","tag","classes","attributes","aliases","join","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","hasAttribute","readyState","defer","window","requestAnimationFrame","setTimeout","WorkerGlobalScope","self","module","exports","g","string","css","markup","addInlined","javascript","regex","js","tagName","includedCdataInside","def","html","mathml","svg","xml","ssml","atom","rss","PLUGIN_NAME","NEW_LINE_EXP","config","lineNumbers","getLine","number","lineNumberRows","querySelector","lineNumberStart","parseInt","getAttribute","lineNumberEnd","children","lineIndex","resize","resizeElements","assumeViewportIndependence","getStyles","getComputedStyle","currentStyle","lastWidth","undefined","innerWidth","pre","remove","lineNumbersWrapper","linesNum","lines","createElement","setAttribute","style","counterReset","appendChild","filter","whiteSpace","infos","codeElement","lineNumberSizer","codeLines","split","display","oneLinerHeight","getBoundingClientRect","height","lineHeights","sizer","Boolean","info","line","childIndex","wrapper","lineNumber"],"mappings":";0GAAe,SAASA,EAAgBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qC,oFCQxB,IAAIC,EAAMC,EAsDNC,EAAS,CAACC,EAAO,MACnB,IAAIC,EArDOA,MACNJ,GAAQA,EAAKK,OAASD,GACzBJ,EAAOM,OAAOC,YALW,GAKCH,GAC1B,mBAAsBJ,GACtBC,EAAa,GACJA,EAAaG,EAAQJ,EAAKK,SACnC,mBAAsBL,GACtBC,EAAa,GAGf,IAAIO,EAAMR,EAAKS,SAASR,EAAYA,EAAaG,GAEjD,OADAH,GAAcG,EACPI,GAyCKE,CAAOP,GACfQ,EAAK,GAET,KAAOR,KAMLQ,GCvEF,mEDuEkC,GAAdP,EAAMD,IAE1B,OAAOQ,I,SE5ETC,MAAMC,UAAUC,MAAQ,CACvB,QAAW,CACV,CACCC,QAAS,kCACTC,YAAY,EACZC,QAAQ,GAET,CACCF,QAAS,mBACTC,YAAY,EACZC,QAAQ,IAGV,OAAU,CACTF,QAAS,iDACTE,QAAQ,GAET,aAAc,CACbF,QAAS,2FACTC,YAAY,EACZE,OAAQ,CACP,YAAe,UAGjB,QAAW,6GACX,QAAW,qBACX,SAAY,YACZ,OAAU,4DACV,SAAY,+CACZ,YAAe,kB,cC3BhB,IAgBIN,EAAQ,SAAWO,GAGvB,IAAIC,EAAO,8BACPC,EAAW,EAGXC,EAAI,CAsBPC,OAAQJ,EAAMP,OAASO,EAAMP,MAAMW,OACnCC,4BAA6BL,EAAMP,OAASO,EAAMP,MAAMY,4BAWxDC,KAAM,CACLC,OAAQ,SAASA,EAAOC,GACvB,OAAIA,aAAkBC,EACd,IAAIA,EAAMD,EAAOE,KAAMH,EAAOC,EAAOG,SAAUH,EAAOI,OACnDC,MAAMC,QAAQN,GACjBA,EAAOO,IAAIR,GAEXC,EAAOQ,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,UAAW,MAoBhFN,KAAM,SAAUO,GACf,OAAOC,OAAOC,UAAUC,SAASC,KAAKJ,GAAGK,MAAM,GAAI,IASpDC,MAAO,SAAUC,GAIhB,OAHKA,EAAU,MACdN,OAAOO,eAAeD,EAAK,OAAQ,CAAEE,QAASxB,IAExCsB,EAAU,MAalBG,MAAO,SAASC,EAAUX,EAAGY,GAG5B,IAAIF,EAAOnC,EACX,OAHAqC,EAAUA,GAAW,GAGb1B,EAAEG,KAAKI,KAAKO,IACnB,IAAK,SAEJ,GADAzB,EAAKW,EAAEG,KAAKiB,MAAMN,GACdY,EAAQrC,GACX,OAAOqC,EAAQrC,GAKhB,IAAK,IAAIsC,KAHTH,EAA2C,GAC3CE,EAAQrC,GAAMmC,EAEEV,EACXA,EAAEc,eAAeD,KACpBH,EAAMG,GAAOF,EAAUX,EAAEa,GAAMD,IAIjC,OAA0B,EAE3B,IAAK,QAEJ,OADArC,EAAKW,EAAEG,KAAKiB,MAAMN,GACdY,EAAQrC,GACJqC,EAAQrC,IAEhBmC,EAAQ,GACRE,EAAQrC,GAAMmC,EAEd,EAA8CK,SAAQ,SAAUC,EAAGC,GAClEP,EAAMO,GAAKN,EAAUK,EAAGJ,MAGC,GAE3B,QACC,OAAOZ,IAYVkB,YAAa,SAAUC,GACtB,KAAOA,IAAYnC,EAAKoC,KAAKD,EAAQE,YACpCF,EAAUA,EAAQG,cAEnB,OAAIH,GACKA,EAAQE,UAAUE,MAAMvC,IAAS,CAAC,CAAE,SAAS,GAAGwC,cAElD,QAURC,cAAe,WACd,GAAwB,oBAAbC,SACV,OAAO,KAER,GAAI,kBAAmBA,SACtB,OAA2BA,SAAsB,cAOlD,IACC,MAAM,IAAIC,MACT,MAAOC,GAQR,IAAIC,GAAO,+BAA+BC,KAAKF,EAAIG,QAAU,IAAI,GACjE,GAAIF,EAAK,CACR,IAAIG,EAAUN,SAASO,qBAAqB,UAC5C,IAAK,IAAIhB,KAAKe,EACb,GAAIA,EAAQf,GAAGY,KAAOA,EACrB,OAAOG,EAAQf,GAIlB,OAAO,OAuBTiB,SAAU,SAAUf,EAASE,EAAWc,GAGvC,IAFA,IAAIC,EAAK,MAAQf,EAEVF,GAAS,CACf,IAAIkB,EAAYlB,EAAQkB,UACxB,GAAIA,EAAUC,SAASjB,GACtB,OAAO,EAER,GAAIgB,EAAUC,SAASF,GACtB,OAAO,EAERjB,EAAUA,EAAQG,cAEnB,QAASa,IAWX1D,UAAW,CA6BV8D,OAAQ,SAAUhE,EAAIiE,GACrB,IAAIxD,EAAOE,EAAEG,KAAKqB,MAAMxB,EAAET,UAAUF,IAEpC,IAAK,IAAIsC,KAAO2B,EACfxD,EAAK6B,GAAO2B,EAAM3B,GAGnB,OAAO7B,GA8ERyD,aAAc,SAAU3D,EAAQ4D,EAAQC,EAAQC,GAE/C,IAAIC,GADJD,EAAOA,GAA4B1D,EAAW,WAC3BJ,GAEfgE,EAAM,GAEV,IAAK,IAAIC,KAASF,EACjB,GAAIA,EAAQ/B,eAAeiC,GAAQ,CAElC,GAAIA,GAASL,EACZ,IAAK,IAAIM,KAAYL,EAChBA,EAAO7B,eAAekC,KACzBF,EAAIE,GAAYL,EAAOK,IAMrBL,EAAO7B,eAAeiC,KAC1BD,EAAIC,GAASF,EAAQE,IAKxB,IAAIE,EAAML,EAAK9D,GAUf,OATA8D,EAAK9D,GAAUgE,EAGf5D,EAAET,UAAUyE,IAAIhE,EAAET,WAAW,SAASoC,EAAKJ,GACtCA,IAAUwC,GAAOpC,GAAO/B,IAC3BqE,KAAKtC,GAAOiC,MAIPA,GAIRI,IAAK,SAASA,EAAIlD,EAAGoD,EAAU3D,EAAMmB,GACpCA,EAAUA,GAAW,GAErB,IAAIN,EAAQpB,EAAEG,KAAKiB,MAEnB,IAAK,IAAIW,KAAKjB,EACb,GAAIA,EAAEc,eAAeG,GAAI,CACxBmC,EAAShD,KAAKJ,EAAGiB,EAAGjB,EAAEiB,GAAIxB,GAAQwB,GAElC,IAAIoC,EAAWrD,EAAEiB,GACbqC,EAAepE,EAAEG,KAAKI,KAAK4D,GAEV,WAAjBC,GAA8B1C,EAAQN,EAAM+C,IAItB,UAAjBC,GAA6B1C,EAAQN,EAAM+C,MACnDzC,EAAQN,EAAM+C,KAAa,EAC3BH,EAAIG,EAAUD,EAAUnC,EAAGL,KAL3BA,EAAQN,EAAM+C,KAAa,EAC3BH,EAAIG,EAAUD,EAAU,KAAMxC,OAWnC2C,QAAS,GAcTC,aAAc,SAASC,EAAOL,GAC7BlE,EAAEwE,kBAAkBhC,SAAU+B,EAAOL,IAkBtCM,kBAAmB,SAASC,EAAWF,EAAOL,GAC7C,IAAIQ,EAAM,CACTR,SAAUA,EACVO,UAAWA,EACXE,SAAU,oGAGX3E,EAAE4E,MAAMC,IAAI,sBAAuBH,GAEnCA,EAAII,SAAWpE,MAAMM,UAAUG,MAAM4D,MAAML,EAAID,UAAUO,iBAAiBN,EAAIC,WAE9E3E,EAAE4E,MAAMC,IAAI,gCAAiCH,GAE7C,IAAK,IAAWzC,EAAPF,EAAI,EAAYE,EAAUyC,EAAII,SAAS/C,MAC/C/B,EAAEiF,iBAAiBhD,GAAmB,IAAVsC,EAAgBG,EAAIR,WAgClDe,iBAAkB,SAAShD,EAASsC,EAAOL,GAE1C,IAAIgB,EAAWlF,EAAEG,KAAK6B,YAAYC,GAC9B0B,EAAU3D,EAAET,UAAU2F,GAG1BjD,EAAQE,UAAYF,EAAQE,UAAUtB,QAAQf,EAAM,IAAIe,QAAQ,OAAQ,KAAO,aAAeqE,EAG9F,IAAIC,EAASlD,EAAQG,cACjB+C,GAA4C,QAAlCA,EAAOC,SAAS9C,gBAC7B6C,EAAOhD,UAAYgD,EAAOhD,UAAUtB,QAAQf,EAAM,IAAIe,QAAQ,OAAQ,KAAO,aAAeqE,GAG7F,IAEIR,EAAM,CACTzC,QAASA,EACTiD,SAAUA,EACVvB,QAASA,EACT0B,KANUpD,EAAQqD,aASnB,SAASC,EAAsBC,GAC9Bd,EAAIc,gBAAkBA,EAEtBxF,EAAE4E,MAAMC,IAAI,gBAAiBH,GAE7BA,EAAIzC,QAAQwD,UAAYf,EAAIc,gBAE5BxF,EAAE4E,MAAMC,IAAI,kBAAmBH,GAC/B1E,EAAE4E,MAAMC,IAAI,WAAYH,GACxBR,GAAYA,EAAShD,KAAKwD,EAAIzC,SAK/B,GAFAjC,EAAE4E,MAAMC,IAAI,sBAAuBH,IAE9BA,EAAIW,KAGR,OAFArF,EAAE4E,MAAMC,IAAI,WAAYH,QACxBR,GAAYA,EAAShD,KAAKwD,EAAIzC,UAM/B,GAFAjC,EAAE4E,MAAMC,IAAI,mBAAoBH,GAE3BA,EAAIf,QAKT,GAAIY,GAAS1E,EAAM6F,OAAQ,CAC1B,IAAIC,EAAS,IAAID,OAAO1F,EAAE4F,UAE1BD,EAAOE,UAAY,SAASC,GAC3BP,EAAsBO,EAAIC,OAG3BJ,EAAOK,YAAYC,KAAKC,UAAU,CACjChB,SAAUR,EAAIQ,SACdG,KAAMX,EAAIW,KACVc,gBAAgB,UAIjBZ,EAAsBvF,EAAEoG,UAAU1B,EAAIW,KAAMX,EAAIf,QAASe,EAAIQ,gBAlB7DK,EAAsBvF,EAAEG,KAAKC,OAAOsE,EAAIW,QA0C1Ce,UAAW,SAAUC,EAAM1C,EAASuB,GACnC,IAAIR,EAAM,CACTW,KAAMgB,EACN1C,QAASA,EACTuB,SAAUA,GAKX,OAHAlF,EAAE4E,MAAMC,IAAI,kBAAmBH,GAC/BA,EAAIrE,OAASL,EAAEsG,SAAS5B,EAAIW,KAAMX,EAAIf,SACtC3D,EAAE4E,MAAMC,IAAI,iBAAkBH,GACvBpE,EAAM4F,UAAUlG,EAAEG,KAAKC,OAAOsE,EAAIrE,QAASqE,EAAIQ,WA2BvDoB,SAAU,SAASD,EAAM1C,GACxB,IAAI4C,EAAO5C,EAAQ4C,KACnB,GAAIA,EAAM,CACT,IAAK,IAAI1C,KAAS0C,EACjB5C,EAAQE,GAAS0C,EAAK1C,UAGhBF,EAAQ4C,KAGhB,IAAIC,EAAY,IAAIC,EAKpB,OAJAC,EAASF,EAAWA,EAAUG,KAAMN,GAEpCO,EAAaP,EAAMG,EAAW7C,EAAS6C,EAAUG,KAAM,GA8ZzD,SAAiBE,GAGhB,IAFA,IAAIC,EAAQ,GACRC,EAAOF,EAAKF,KAAKK,KACdD,IAASF,EAAKI,MACpBH,EAAMI,KAAKH,EAAKxF,OAChBwF,EAAOA,EAAKC,KAEb,OAAOF,EAnaCK,CAAQX,IAQhB5B,MAAO,CACNwC,IAAK,GAcLC,IAAK,SAAUC,EAAMpD,GACpB,IAAIU,EAAQ5E,EAAE4E,MAAMwC,IAEpBxC,EAAM0C,GAAQ1C,EAAM0C,IAAS,GAE7B1C,EAAM0C,GAAMJ,KAAKhD,IAYlBW,IAAK,SAAUyC,EAAM5C,GACpB,IAAI6C,EAAYvH,EAAE4E,MAAMwC,IAAIE,GAE5B,GAAKC,GAAcA,EAAUxI,OAI7B,IAAK,IAASmF,EAALnC,EAAE,EAAamC,EAAWqD,EAAUxF,MAC5CmC,EAASQ,KAKZpE,MAAOA,GAqBR,SAASA,EAAMC,EAAMC,EAASC,EAAO+G,GAUpCvD,KAAK1D,KAAOA,EASZ0D,KAAKzD,QAAUA,EAQfyD,KAAKxD,MAAQA,EAEbwD,KAAKlF,OAAqC,GAA3ByI,GAAc,IAAIzI,OA8ElC,SAAS0I,EAAahI,EAASiI,EAAKrB,EAAM3G,GACzCD,EAAQkI,UAAYD,EACpB,IAAIrF,EAAQ5C,EAAQmD,KAAKyD,GACzB,GAAIhE,GAAS3C,GAAc2C,EAAM,GAAI,CAEpC,IAAIuF,EAAmBvF,EAAM,GAAGtD,OAChCsD,EAAMwF,OAASD,EACfvF,EAAM,GAAKA,EAAM,GAAGlB,MAAMyG,GAE3B,OAAOvF,EAiBR,SAASuE,EAAaP,EAAMG,EAAW7C,EAASmE,EAAWC,EAAUC,GACpE,IAAK,IAAInE,KAASF,EACjB,GAAKA,EAAQ/B,eAAeiC,IAAWF,EAAQE,GAA/C,CAIA,IAAIoE,EAAWtE,EAAQE,GACvBoE,EAAWvH,MAAMC,QAAQsH,GAAYA,EAAW,CAACA,GAEjD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASlJ,SAAUmJ,EAAG,CACzC,GAAIF,GAAWA,EAAQG,OAAStE,EAAQ,IAAMqE,EAC7C,OAGD,IAAIE,EAAaH,EAASC,GACzBtI,EAASwI,EAAWxI,OACpBF,IAAe0I,EAAW1I,WAC1BC,IAAWyI,EAAWzI,OACtBc,EAAQ2H,EAAW3H,MAEpB,GAAId,IAAWyI,EAAW3I,QAAQ4I,OAAQ,CAEzC,IAAIC,EAAQF,EAAW3I,QAAQwB,WAAWoB,MAAM,aAAa,GAC7D+F,EAAW3I,QAAU8I,OAAOH,EAAW3I,QAAQ+I,OAAQF,EAAQ,KAMhE,IAFA,IAAI7I,EAAU2I,EAAW3I,SAAW2I,EAG/BK,EAAcX,EAAUd,KAAMU,EAAMK,EACxCU,IAAgBjC,EAAUS,QAItBe,GAAWN,GAAOM,EAAQU,OAH9BhB,GAAOe,EAAYlH,MAAMxC,OAAQ0J,EAAcA,EAAYzB,KAC1D,CAMD,IAAI2B,EAAMF,EAAYlH,MAEtB,GAAIiF,EAAUzH,OAASsH,EAAKtH,OAE3B,OAGD,KAAI4J,aAAerI,GAAnB,CAIA,IACI+B,EADAuG,EAAc,EAGlB,GAAIjJ,EAAQ,CAEX,KADA0C,EAAQoF,EAAahI,EAASiI,EAAKrB,EAAM3G,IAExC,MAGD,IAAImJ,EAAOxG,EAAMwF,MACbiB,EAAKzG,EAAMwF,MAAQxF,EAAM,GAAGtD,OAC5BgK,EAAIrB,EAIR,IADAqB,GAAKN,EAAYlH,MAAMxC,OAChB8J,GAAQE,GAEdA,IADAN,EAAcA,EAAYzB,MACTzF,MAAMxC,OAOxB,GAHA2I,EADAqB,GAAKN,EAAYlH,MAAMxC,OAInB0J,EAAYlH,iBAAiBjB,EAChC,SAID,IACC,IAAI0I,EAAIP,EACRO,IAAMxC,EAAUS,OAAS8B,EAAID,GAAyB,iBAAZE,EAAEzH,OAC5CyH,EAAIA,EAAEhC,KAEN4B,IACAG,GAAKC,EAAEzH,MAAMxC,OAEd6J,IAGAD,EAAMtC,EAAKlF,MAAMuG,EAAKqB,GACtB1G,EAAMwF,OAASH,OAGf,KADArF,EAAQoF,EAAahI,EAAS,EAAGkJ,EAAKjJ,IAErC,SAIEmJ,EAAOxG,EAAMwF,MAAjB,IACCoB,EAAW5G,EAAM,GACjBmB,EAASmF,EAAIxH,MAAM,EAAG0H,GACtBK,EAAQP,EAAIxH,MAAM0H,EAAOI,EAASlK,QAE/B2J,EAAQhB,EAAMiB,EAAI5J,OAClBiJ,GAAWU,EAAQV,EAAQU,QAC9BV,EAAQU,MAAQA,GAGjB,IAAIS,EAAaV,EAAYW,KAEzB5F,IACH2F,EAAazC,EAASF,EAAW2C,EAAY3F,GAC7CkE,GAAOlE,EAAOzE,QAGfsK,EAAY7C,EAAW2C,EAAYP,GAGnCH,EAAc/B,EAASF,EAAW2C,EADpB,IAAI7I,EAAMuD,EAAOjE,EAASI,EAAEsG,SAAS2C,EAAUrJ,GAAUqJ,EAAUxI,EAAOwI,IAGpFC,GACHxC,EAASF,EAAWiC,EAAaS,GAG9BN,EAAc,GAGjBhC,EAAaP,EAAMG,EAAW7C,EAAS8E,EAAYW,KAAM1B,EAAK,CAC7DS,MAAOtE,EAAQ,IAAMqE,EACrBQ,MAAOA,QAqBb,SAASjC,IAER,IAAIE,EAAO,CAAEpF,MAAO,KAAM6H,KAAM,KAAMpC,KAAM,MAExCC,EAAO,CAAE1F,MAAO,KAAM6H,KAAMzC,EAAMK,KAAM,MAC5CL,EAAKK,KAAOC,EAGZhD,KAAK0C,KAAOA,EAEZ1C,KAAKgD,KAAOA,EACZhD,KAAKlF,OAAS,EAWf,SAAS2H,EAASG,EAAME,EAAMxF,GAE7B,IAAIyF,EAAOD,EAAKC,KAEZsC,EAAU,CAAE/H,MAAOA,EAAO6H,KAAMrC,EAAMC,KAAMA,GAKhD,OAJAD,EAAKC,KAAOsC,EACZtC,EAAKoC,KAAOE,EACZzC,EAAK9H,SAEEuK,EASR,SAASD,EAAYxC,EAAME,EAAMwC,GAEhC,IADA,IAAIvC,EAAOD,EAAKC,KACPjF,EAAI,EAAGA,EAAIwH,GAASvC,IAASH,EAAKI,KAAMlF,IAChDiF,EAAOA,EAAKA,KAEbD,EAAKC,KAAOA,EACZA,EAAKoC,KAAOrC,EACZF,EAAK9H,QAAUgD,EAkBhB,GAhXAlC,EAAMP,MAAQU,EA+EdM,EAAM4F,UAAY,SAASA,EAAUpF,EAAGoE,GACvC,GAAgB,iBAALpE,EACV,OAAOA,EAER,GAAIJ,MAAMC,QAAQG,GAAI,CACrB,IAAI0I,EAAI,GAIR,OAHA1I,EAAEe,SAAQ,SAAU4H,GACnBD,GAAKtD,EAAUuD,EAAGvE,MAEZsE,EAGR,IAAI9E,EAAM,CACTnE,KAAMO,EAAEP,KACRC,QAAS0F,EAAUpF,EAAEN,QAAS0E,GAC9BwE,IAAK,OACLC,QAAS,CAAC,QAAS7I,EAAEP,MACrBqJ,WAAY,GACZ1E,SAAUA,GAGP2E,EAAU/I,EAAEL,MACZoJ,IACCnJ,MAAMC,QAAQkJ,GACjBnJ,MAAMM,UAAUkG,KAAKnC,MAAML,EAAIiF,QAASE,GAExCnF,EAAIiF,QAAQzC,KAAK2C,IAInB7J,EAAE4E,MAAMC,IAAI,OAAQH,GAEpB,IAAIkF,EAAa,GACjB,IAAK,IAAItC,KAAQ5C,EAAIkF,WACpBA,GAAc,IAAMtC,EAAO,MAAQ5C,EAAIkF,WAAWtC,IAAS,IAAIzG,QAAQ,KAAM,UAAY,IAG1F,MAAO,IAAM6D,EAAIgF,IAAM,WAAahF,EAAIiF,QAAQG,KAAK,KAAO,IAAMF,EAAa,IAAMlF,EAAIlE,QAAU,KAAOkE,EAAIgF,IAAM,MA4PhH7J,EAAM2C,SACV,OAAK3C,EAAMkK,kBAKN/J,EAAEE,6BAENL,EAAMkK,iBAAiB,WAAW,SAAUjE,GAC3C,IAAIkE,EAAU/D,KAAKgE,MAAMnE,EAAIC,MAC5BjG,EAAOkK,EAAQ9E,SACfG,EAAO2E,EAAQ3E,KACfc,EAAiB6D,EAAQ7D,eAE1BtG,EAAMmG,YAAYhG,EAAEoG,UAAUf,EAAMrF,EAAET,UAAUO,GAAOA,IACnDqG,GACHtG,EAAMqK,WAEL,GAGGlK,GAlBCA,EAsBT,IAAImK,EAASnK,EAAEG,KAAKoC,gBAUpB,SAAS6H,IACHpK,EAAEC,QACND,EAAEsE,eAIJ,GAdI6F,IACHnK,EAAE4F,SAAWuE,EAAOxH,IAEhBwH,EAAOE,aAAa,iBACvBrK,EAAEC,QAAS,KAURD,EAAEC,OAAQ,CAOd,IAAIqK,EAAa9H,SAAS8H,WACP,YAAfA,GAA2C,gBAAfA,GAAgCH,GAAUA,EAAOI,MAChF/H,SAASuH,iBAAiB,mBAAoBK,GAE1CI,OAAOC,sBACVD,OAAOC,sBAAsBL,GAE7BI,OAAOE,WAAWN,EAAgC,IAKrD,OAAOpK,EA5lCK,CAhBmB,oBAAXwK,OACjBA,OAE6B,oBAAtBG,mBAAqCC,gBAAgBD,kBAC3DC,KACA,IA2mCiCC,EAAOC,UAC3CD,EAAOC,QAAUxL,QAII,IAAX,EAAAyL,IACV,EAAAA,EAAOzL,MAAQA,I,UCxnCf,SAAUA,GAEV,IAAI0L,EAAS,gDAEb1L,EAAMC,UAAU0L,IAAM,CACrB,QAAW,mBACX,OAAU,CACTxL,QAAS,iDACTG,OAAQ,CACP,KAAQ,WACR,6BAA8B,CAC7BH,QAAS,4FACTC,YAAY,EACZe,MAAO,YAER,QAAW,CACVhB,QAAS,yCACTC,YAAY,KAKf,IAAO,CAEND,QAAS8I,OAAO,eAAiByC,EAAOxC,OAAS,IAAM,8BAA8BA,OAAS,OAAQ,KACtG7I,QAAQ,EACRC,OAAQ,CACP,SAAY,QACZ,YAAe,UACf,OAAU,CACTH,QAAS8I,OAAO,IAAMyC,EAAOxC,OAAS,KACtC/H,MAAO,SAIV,SAAY8H,OAAO,0CAA4CyC,EAAOxC,OAAS,iBAC/E,OAAU,CACT/I,QAASuL,EACTrL,QAAQ,GAET,SAAY,+DACZ,UAAa,gBACb,SAAY,oBACZ,YAAe,aAGhBL,EAAMC,UAAU0L,IAAY,OAAErL,OAAO2G,KAAOjH,EAAMC,UAAU0L,IAE5D,IAAIC,EAAS5L,EAAMC,UAAU2L,OACzBA,IACHA,EAAOxB,IAAIyB,WAAW,QAAS,OAE/B7L,EAAMC,UAAUgE,aAAa,SAAU,aAAc,CACpD,aAAc,CACb9D,QAAS,6CACTC,YAAY,EACZE,OAAQ,CACP,aAAc,CACbH,QAAS,qCACTG,OAAQ,CACP,MAAS,CACRH,QAAS,yBACTC,YAAY,EACZe,MAAO,eACPb,OAAQN,EAAMC,UAAU0L,KAEzB,YAAe,CACd,CACCxL,QAAS,KACTgB,MAAO,eAER,SAIH,YAAa,aAGbyK,EAAOxB,MA9EZ,CAiFEpK,Q,SCjFFA,MAAMC,UAAU6L,WAAa9L,MAAMC,UAAU8D,OAAO,QAAS,CAC5D,aAAc,CACb/D,MAAMC,UAAUC,MAAM,cACtB,CACCC,QAAS,0GACTC,YAAY,IAGd,QAAW,CACV,CACCD,QAAS,kCACTC,YAAY,GAEb,CACCD,QAAS,oZACTC,YAAY,IAId,SAAY,oGACZ,OAAU,gOACV,SAAY,8FAGbJ,MAAMC,UAAU6L,WAAW,cAAc,GAAG3L,QAAU,uEAEtDH,MAAMC,UAAUgE,aAAa,aAAc,UAAW,CACrD,MAAS,CACR9D,QAAS,uLACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACP,eAAgB,CACfH,QAAS,4BACTC,YAAY,EACZe,MAAO,iBACPb,OAAQN,MAAMC,UAAU8L,OAEzB,cAAe,UACf,kBAAmB,YAIrB,oBAAqB,CACpB5L,QAAS,gMACTgB,MAAO,YAER,UAAa,CACZ,CACChB,QAAS,sIACTC,YAAY,EACZE,OAAQN,MAAMC,UAAU6L,YAEzB,CACC3L,QAAS,mEACTG,OAAQN,MAAMC,UAAU6L,YAEzB,CACC3L,QAAS,kEACTC,YAAY,EACZE,OAAQN,MAAMC,UAAU6L,YAEzB,CACC3L,QAAS,8eACTC,YAAY,EACZE,OAAQN,MAAMC,UAAU6L,aAG1B,SAAY,8BAGb9L,MAAMC,UAAUgE,aAAa,aAAc,SAAU,CACpD,kBAAmB,CAClB9D,QAAS,oEACTE,QAAQ,EACRC,OAAQ,CACP,uBAAwB,CACvBH,QAAS,QACTgB,MAAO,UAER,cAAiB,CAChBhB,QAAS,6DACTC,YAAY,EACZE,OAAQ,CACP,4BAA6B,CAC5BH,QAAS,UACTgB,MAAO,eAER8F,KAAMjH,MAAMC,UAAU6L,aAGxB,OAAU,cAKT9L,MAAMC,UAAU2L,QACnB5L,MAAMC,UAAU2L,OAAOxB,IAAIyB,WAAW,SAAU,cAGjD7L,MAAMC,UAAU+L,GAAKhM,MAAMC,UAAU6L,Y,SCpGrC9L,MAAMC,UAAU2L,OAAS,CACxB,QAAW,kBACX,OAAU,iBACV,QAAW,CAEVzL,QAAS,uHACTE,QAAQ,EACRC,OAAQ,CACP,kBAAmB,CAClBH,QAAS,sBACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAET,OAAU,CACTH,QAAS,kBACTE,QAAQ,GAET,YAAe,eACf,cAAe,WACf,KAAQ,eAGV,MAAS,0BACT,IAAO,CACNF,QAAS,uHACTE,QAAQ,EACRC,OAAQ,CACP,IAAO,CACNH,QAAS,iBACTG,OAAQ,CACP,YAAe,QACf,UAAa,iBAGf,aAAc,CACbH,QAAS,qCACTG,OAAQ,CACP,YAAe,CACd,CACCH,QAAS,KACTgB,MAAO,eAER,SAIH,YAAe,OACf,YAAa,CACZhB,QAAS,YACTG,OAAQ,CACP,UAAa,mBAMjB,OAAU,CACT,CACCH,QAAS,kBACTgB,MAAO,gBAER,uBAIFnB,MAAMC,UAAU2L,OAAY,IAAEtL,OAAO,cAAcA,OAAe,OACjEN,MAAMC,UAAU2L,OAAe,OAChC5L,MAAMC,UAAU2L,OAAgB,QAAEtL,OAAO,mBAAmBA,OAASN,MAAMC,UAAU2L,OAGrF5L,MAAMsF,MAAMyC,IAAI,QAAQ,SAAU3C,GAEhB,WAAbA,EAAInE,OACPmE,EAAIkF,WAAkB,MAAIlF,EAAIlE,QAAQK,QAAQ,QAAS,SAIzDE,OAAOO,eAAehC,MAAMC,UAAU2L,OAAOxB,IAAK,aAAc,CAY/DnI,MAAO,SAAoBgK,EAASzL,GACnC,IAAI0L,EAAsB,GAC1BA,EAAoB,YAAc1L,GAAQ,CACzCL,QAAS,oCACTC,YAAY,EACZE,OAAQN,MAAMC,UAAUO,IAEzB0L,EAA2B,MAAI,uBAE/B,IAAI5L,EAAS,CACZ,iBAAkB,CACjBH,QAAS,4BACTG,OAAQ4L,IAGV5L,EAAO,YAAcE,GAAQ,CAC5BL,QAAS,UACTG,OAAQN,MAAMC,UAAUO,IAGzB,IAAI2L,EAAM,GACVA,EAAIF,GAAW,CACd9L,QAAS8I,OAAO,wFAAwFC,OAAO3H,QAAQ,OAAO,WAAc,OAAO0K,KAAa,KAChK7L,YAAY,EACZC,QAAQ,EACRC,OAAQA,GAGTN,MAAMC,UAAUgE,aAAa,SAAU,QAASkI,MAIlDnM,MAAMC,UAAUmM,KAAOpM,MAAMC,UAAU2L,OACvC5L,MAAMC,UAAUoM,OAASrM,MAAMC,UAAU2L,OACzC5L,MAAMC,UAAUqM,IAAMtM,MAAMC,UAAU2L,OAEtC5L,MAAMC,UAAUsM,IAAMvM,MAAMC,UAAU8D,OAAO,SAAU,IACvD/D,MAAMC,UAAUuM,KAAOxM,MAAMC,UAAUsM,IACvCvM,MAAMC,UAAUwM,KAAOzM,MAAMC,UAAUsM,IACvCvM,MAAMC,UAAUyM,IAAM1M,MAAMC,UAAUsM,K,UCjIrC,WAEA,GAAoB,oBAATjB,MAAyBA,KAAKtL,OAAUsL,KAAKpI,SAAxD,CAQA,IAAIyJ,EAAc,eAMdC,EAAe,WAMfC,EAAS7M,MAAM+E,QAAQ+H,YAAc,CAOxCC,QAAS,SAAUpK,EAASqK,GAC3B,GAAwB,QAApBrK,EAAQsJ,SAAsBtJ,EAAQkB,UAAUC,SAAS6I,GAA7D,CAIA,IAAIM,EAAiBtK,EAAQuK,cAAc,sBAC3C,GAAKD,EAAL,CAGA,IAAIE,EAAkBC,SAASzK,EAAQ0K,aAAa,cAAe,KAAO,EACtEC,EAAgBH,GAAmBF,EAAeM,SAAS9N,OAAS,GAEpEuN,EAASG,IACZH,EAASG,GAENH,EAASM,IACZN,EAASM,GAGV,IAAIE,EAAYR,EAASG,EAEzB,OAAOF,EAAeM,SAASC,MAUhCC,OAAQ,SAAU9K,GACjB+K,EAAe,CAAC/K,KAajBgL,4BAA4B,GAmGzBC,EAAY,SAAUjL,GACzB,OAAKA,EAIEuI,OAAO2C,iBAAmBA,iBAAiBlL,GAAYA,EAAQmL,cAAgB,KAH9E,MAMLC,OAAYC,EAChB9C,OAAOT,iBAAiB,UAAU,WAC7BoC,EAAOc,4BAA8BI,IAAc7C,OAAO+C,aAG9DF,EAAY7C,OAAO+C,WAEnBP,EAAetM,MAAMM,UAAUG,MAAMD,KAAKsB,SAASwC,iBAAiB,0BAGrE1F,MAAMsF,MAAMyC,IAAI,YAAY,SAAU3C,GACrC,GAAKA,EAAIW,KAAT,CAIA,IAAIA,EAA+BX,EAAW,QAC1C8I,EAAkCnI,EAAe,WAGrD,GAAKmI,GAAQ,OAAOtL,KAAKsL,EAAIpI,YAKzBC,EAAKmH,cAAc,uBAKlBlN,MAAMa,KAAK6C,SAASqC,EAAM4G,GAA/B,CAKA5G,EAAKlC,UAAUsK,OAAOxB,GAEtBuB,EAAIrK,UAAUkE,IAAI4E,GAElB,IAEIyB,EAFArL,EAAQqC,EAAIW,KAAKhD,MAAM6J,GACvByB,EAAWtL,EAAQA,EAAMtD,OAAS,EAAI,EAGtC6O,EAAQ,IAAIlN,MAAMiN,EAAW,GAAG7D,KAAK,kBAEzC4D,EAAqBlL,SAASqL,cAAc,SACzBC,aAAa,cAAe,QAC/CJ,EAAmBvL,UAAY,oBAC/BuL,EAAmBjI,UAAYmI,EAE3BJ,EAAInD,aAAa,gBACpBmD,EAAIO,MAAMC,aAAe,eAAiBtB,SAASc,EAAIb,aAAa,cAAe,IAAM,IAG1FjI,EAAIzC,QAAQgM,YAAYP,GAExBV,EAAe,CAACQ,IAEhBlO,MAAMsF,MAAMC,IAAI,eAAgBH,QAGjCpF,MAAMsF,MAAMyC,IAAI,gBAAgB,SAAU3C,GACzCA,EAAIL,QAAUK,EAAIL,SAAW,GAC7BK,EAAIL,QAAQ+H,aAAc,KAjK3B,SAASY,EAAelI,GAOvB,GAAuB,IANvBA,EAAWA,EAASoJ,QAAO,SAAUzE,GACpC,IACI0E,EADajB,EAAUzD,GACC,eAC5B,MAAsB,aAAf0E,GAA4C,aAAfA,MAGxBpP,OAAb,CAIA,IAAIqP,EAAQtJ,EAASlE,KAAI,SAAUqB,GAClC,IAAIoM,EAAcpM,EAAQuK,cAAc,QACpCkB,EAAqBzL,EAAQuK,cAAc,sBAC/C,GAAK6B,GAAgBX,EAArB,CAKA,IAAIY,EAAkBrM,EAAQuK,cAAc,uBACxC+B,EAAYF,EAAY/I,YAAYkJ,MAAMtC,GAEzCoC,KACJA,EAAkB9L,SAASqL,cAAc,SACzB1L,UAAY,qBAE5BkM,EAAYJ,YAAYK,IAGzBA,EAAgB7I,UAAY,IAC5B6I,EAAgBP,MAAMU,QAAU,QAEhC,IAAIC,EAAiBJ,EAAgBK,wBAAwBC,OAG7D,OAFAN,EAAgB7I,UAAY,GAErB,CACNxD,QAASA,EACT2L,MAAOW,EACPM,YAAa,GACbH,eAAgBA,EAChBI,MAAOR,OAENJ,OAAOa,SAEVX,EAAMvM,SAAQ,SAAUmN,GACvB,IAAIV,EAAkBU,EAAKF,MACvBlB,EAAQoB,EAAKpB,MACbiB,EAAcG,EAAKH,YACnBH,EAAiBM,EAAKN,eAE1BG,EAAYjB,EAAM7O,OAAS,QAAKuO,EAChCM,EAAM/L,SAAQ,SAAUoN,EAAMpH,GAC7B,GAAIoH,GAAQA,EAAKlQ,OAAS,EAAG,CAC5B,IAAI0K,EAAI6E,EAAgBL,YAAYzL,SAASqL,cAAc,SAC3DpE,EAAEsE,MAAMU,QAAU,QAClBhF,EAAEnE,YAAc2J,OAEhBJ,EAAYhH,GAAS6G,QAKxBN,EAAMvM,SAAQ,SAAUmN,GAKvB,IAJA,IAAIV,EAAkBU,EAAKF,MACvBD,EAAcG,EAAKH,YAEnBK,EAAa,EACRnN,EAAI,EAAGA,EAAI8M,EAAY9P,OAAQgD,SAChBuL,IAAnBuB,EAAY9M,KACf8M,EAAY9M,GAAKuM,EAAgBzB,SAASqC,KAAcP,wBAAwBC,WAKnFR,EAAMvM,SAAQ,SAAUmN,GACvB,IAAIV,EAAkBU,EAAKF,MACvBK,EAAUH,EAAK/M,QAAQuK,cAAc,sBAEzC8B,EAAgBP,MAAMU,QAAU,OAChCH,EAAgB7I,UAAY,GAE5BuJ,EAAKH,YAAYhN,SAAQ,SAAU+M,EAAQQ,GAC1CD,EAAQtC,SAASuC,GAAYrB,MAAMa,OAASA,EAAS,aApKzD","file":"scripts/defaultVendors-40df703eb23f92ed144b.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import crypto from 'crypto'\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\n// It is best to make fewer, larger requests to the crypto module to\n// avoid system call overhead. So, random numbers are generated in a\n// pool. The pool is a Buffer that is larger than the initial random\n// request size by this multiplier. The pool is enlarged if subsequent\n// requests exceed the maximum buffer size.\nconst POOL_SIZE_MULTIPLIER = 32\nlet pool, poolOffset\n\nlet random = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n\n  let res = pool.subarray(poolOffset, poolOffset + bytes)\n  poolOffset += bytes\n  return res\n}\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  let step = Math.ceil((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (let i = 0; i < step; i++)`.\n      let i = step\n      while (i--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let bytes = random(size)\n  let id = ''\n  // A compact alternative for `for (let i = 0; i < size; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nexport { urlAlphabet }\n","Prism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'function': /\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n","/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\nvar uniqueId = 0;\n\n\nvar _ = {\n\t/**\n\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t * additional languages or plugins yourself.\n\t *\n\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t *\n\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t * empty Prism object into the global scope before loading the Prism script like this:\n\t *\n\t * ```js\n\t * window.Prism = window.Prism || {};\n\t * Prism.manual = true;\n\t * // add a new <script> to load Prism's script\n\t * ```\n\t *\n\t * @default false\n\t * @type {boolean}\n\t * @memberof Prism\n\t * @public\n\t */\n\tmanual: _self.Prism && _self.Prism.manual,\n\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t/**\n\t * A namespace for utility methods.\n\t *\n\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t * change or disappear at any time.\n\t *\n\t * @namespace\n\t * @memberof Prism\n\t */\n\tutil: {\n\t\tencode: function encode(tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\treturn tokens.map(encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns the name of the type of the given value.\n\t\t *\n\t\t * @param {any} o\n\t\t * @returns {string}\n\t\t * @example\n\t\t * type(null)      === 'Null'\n\t\t * type(undefined) === 'Undefined'\n\t\t * type(123)       === 'Number'\n\t\t * type('foo')     === 'String'\n\t\t * type(true)      === 'Boolean'\n\t\t * type([1, 2])    === 'Array'\n\t\t * type({})        === 'Object'\n\t\t * type(String)    === 'Function'\n\t\t * type(/abc+/)    === 'RegExp'\n\t\t */\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t},\n\n\t\t/**\n\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t *\n\t\t * @param {Object} obj\n\t\t * @returns {number}\n\t\t */\n\t\tobjId: function (obj) {\n\t\t\tif (!obj['__id']) {\n\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t}\n\t\t\treturn obj['__id'];\n\t\t},\n\n\t\t/**\n\t\t * Creates a deep clone of the given object.\n\t\t *\n\t\t * The main intended use of this function is to clone language definitions.\n\t\t *\n\t\t * @param {T} o\n\t\t * @param {Record<number, any>} [visited]\n\t\t * @returns {T}\n\t\t * @template T\n\t\t */\n\t\tclone: function deepClone(o, visited) {\n\t\t\tvisited = visited || {};\n\n\t\t\tvar clone, id;\n\t\t\tswitch (_.util.type(o)) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t}\n\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t}\n\t\t\t\t\tclone = [];\n\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn o;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t *\n\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t *\n\t\t * @param {Element} element\n\t\t * @returns {string}\n\t\t */\n\t\tgetLanguage: function (element) {\n\t\t\twhile (element && !lang.test(element.className)) {\n\t\t\t\telement = element.parentElement;\n\t\t\t}\n\t\t\tif (element) {\n\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n\t\t\t}\n\t\t\treturn 'none';\n\t\t},\n\n\t\t/**\n\t\t * Returns the script element that is currently executing.\n\t\t *\n\t\t * This does __not__ work for line script element.\n\t\t *\n\t\t * @returns {HTMLScriptElement | null}\n\t\t */\n\t\tcurrentScript: function () {\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t}\n\n\t\t\t// IE11 workaround\n\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t// this will not work for inline scripts\n\n\t\t\ttry {\n\t\t\t\tthrow new Error();\n\t\t\t} catch (err) {\n\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t// A stack will look like this:\n\t\t\t\t//\n\t\t\t\t// Error\n\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\tif (src) {\n\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns whether a given class is active for `element`.\n\t\t *\n\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t * given class is just the given class with a `no-` prefix.\n\t\t *\n\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t *\n\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t * version of it, the class is considered active.\n\t\t *\n\t\t * @param {Element} element\n\t\t * @param {string} className\n\t\t * @param {boolean} [defaultActivation=false]\n\t\t * @returns {boolean}\n\t\t */\n\t\tisActive: function (element, className, defaultActivation) {\n\t\t\tvar no = 'no-' + className;\n\n\t\t\twhile (element) {\n\t\t\t\tvar classList = element.classList;\n\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telement = element.parentElement;\n\t\t\t}\n\t\t\treturn !!defaultActivation;\n\t\t}\n\t},\n\n\t/**\n\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t *\n\t * @namespace\n\t * @memberof Prism\n\t * @public\n\t */\n\tlanguages: {\n\t\t/**\n\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t *\n\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t * will be overwritten at its original position.\n\t\t *\n\t\t * ## Best practices\n\t\t *\n\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t *\n\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t *\n\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t * @param {Grammar} redef The new tokens to append.\n\t\t * @returns {Grammar} The new language created.\n\t\t * @public\n\t\t * @example\n\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t *     // at its original position\n\t\t *     'comment': { ... },\n\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t * });\n\t\t */\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t/**\n\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t *\n\t\t * ## Usage\n\t\t *\n\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t * this:\n\t\t *\n\t\t * ```js\n\t\t * Prism.languages.markup.style = {\n\t\t *     // token\n\t\t * };\n\t\t * ```\n\t\t *\n\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t *\n\t\t * ```js\n\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t *     'style': {\n\t\t *         // token\n\t\t *     }\n\t\t * });\n\t\t * ```\n\t\t *\n\t\t * ## Special cases\n\t\t *\n\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t * will be ignored.\n\t\t *\n\t\t * This behavior can be used to insert tokens after `before`:\n\t\t *\n\t\t * ```js\n\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t *     'comment': Prism.languages.markup.comment,\n\t\t *     // tokens after 'comment'\n\t\t * });\n\t\t * ```\n\t\t *\n\t\t * ## Limitations\n\t\t *\n\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t *\n\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t *\n\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t *\n\t\t * ```js\n\t\t * var oldMarkup = Prism.languages.markup;\n\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t *\n\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t * ```\n\t\t *\n\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t * object to be modified.\n\t\t * @param {string} before The key to insert before.\n\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t * object to be modified.\n\t\t *\n\t\t * Defaults to `Prism.languages`.\n\t\t * @returns {Grammar} The new grammar object.\n\t\t * @public\n\t\t */\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\tvar grammar = root[inside];\n\t\t\t/** @type {Grammar} */\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar old = root[inside];\n\t\t\troot[inside] = ret;\n\n\t\t\t// Update references in other language definitions\n\t\t\t_.languages.DFS(_.languages, function(key, value) {\n\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\tthis[key] = ret;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\tvisited = visited || {};\n\n\t\t\tvar objId = _.util.objId;\n\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tvar property = o[i],\n\t\t\t\t\t    propertyType = _.util.type(property);\n\n\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t}\n\t\t\t\t\telse if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tplugins: {},\n\n\t/**\n\t * This is the most high-level function in Prism’s API.\n\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t * each one of them.\n\t *\n\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t *\n\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t * @memberof Prism\n\t * @public\n\t */\n\thighlightAll: function(async, callback) {\n\t\t_.highlightAllUnder(document, async, callback);\n\t},\n\n\t/**\n\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t * {@link Prism.highlightElement} on each one of them.\n\t *\n\t * The following hooks will be run:\n\t * 1. `before-highlightall`\n\t * 2. `before-all-elements-highlight`\n\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t *\n\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t * @memberof Prism\n\t * @public\n\t */\n\thighlightAllUnder: function(container, async, callback) {\n\t\tvar env = {\n\t\t\tcallback: callback,\n\t\t\tcontainer: container,\n\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t};\n\n\t\t_.hooks.run('before-highlightall', env);\n\n\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\tfor (var i = 0, element; element = env.elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t}\n\t},\n\n\t/**\n\t * Highlights the code inside a single element.\n\t *\n\t * The following hooks will be run:\n\t * 1. `before-sanity-check`\n\t * 2. `before-highlight`\n\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t * 4. `before-insert`\n\t * 5. `after-highlight`\n\t * 6. `complete`\n\t *\n\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t * the element's language.\n\t *\n\t * @param {Element} element The element containing the code.\n\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t *\n\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t * asynchronous highlighting to work. You can build your own bundle on the\n\t * [Download page](https://prismjs.com/download.html).\n\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t * @memberof Prism\n\t * @public\n\t */\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language = _.util.getLanguage(element);\n\t\tvar grammar = _.languages[language];\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t// Set language on the parent, for styling\n\t\tvar parent = element.parentElement;\n\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t_.hooks.run('complete', env);\n\t\t\tcallback && callback.call(env.element);\n\t\t}\n\n\t\t_.hooks.run('before-sanity-check', env);\n\n\t\tif (!env.code) {\n\t\t\t_.hooks.run('complete', env);\n\t\t\tcallback && callback.call(env.element);\n\t\t\treturn;\n\t\t}\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (!env.grammar) {\n\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\treturn;\n\t\t}\n\n\t\tif (async && _self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code,\n\t\t\t\timmediateClose: true\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t}\n\t},\n\n\t/**\n\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t * and the language definitions to use, and returns a string with the HTML produced.\n\t *\n\t * The following hooks will be run:\n\t * 1. `before-tokenize`\n\t * 2. `after-tokenize`\n\t * 3. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string} text A string with the code to be highlighted.\n\t * @param {Grammar} grammar An object containing the tokens to use.\n\t *\n\t * Usually a language definition like `Prism.languages.markup`.\n\t * @param {string} language The name of the language definition passed to `grammar`.\n\t * @returns {string} The highlighted HTML.\n\t * @memberof Prism\n\t * @public\n\t * @example\n\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t */\n\thighlight: function (text, grammar, language) {\n\t\tvar env = {\n\t\t\tcode: text,\n\t\t\tgrammar: grammar,\n\t\t\tlanguage: language\n\t\t};\n\t\t_.hooks.run('before-tokenize', env);\n\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t_.hooks.run('after-tokenize', env);\n\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t},\n\n\t/**\n\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t * and the language definitions to use, and returns an array with the tokenized code.\n\t *\n\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t *\n\t * This method could be useful in other contexts as well, as a very crude parser.\n\t *\n\t * @param {string} text A string with the code to be highlighted.\n\t * @param {Grammar} grammar An object containing the tokens to use.\n\t *\n\t * Usually a language definition like `Prism.languages.markup`.\n\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t * @memberof Prism\n\t * @public\n\t * @example\n\t * let code = `var foo = 0;`;\n\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t * tokens.forEach(token => {\n\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t *         console.log(`Found numeric literal: ${token.content}`);\n\t *     }\n\t * });\n\t */\n\ttokenize: function(text, grammar) {\n\t\tvar rest = grammar.rest;\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\tvar tokenList = new LinkedList();\n\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\treturn toArray(tokenList);\n\t},\n\n\t/**\n\t * @namespace\n\t * @memberof Prism\n\t * @public\n\t */\n\thooks: {\n\t\tall: {},\n\n\t\t/**\n\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t *\n\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t *\n\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t *\n\t\t * @param {string} name The name of the hook.\n\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t * @public\n\t\t */\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\t/**\n\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t *\n\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t *\n\t\t * @param {string} name The name of the hook.\n\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t * @public\n\t\t */\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t},\n\n\tToken: Token\n};\n_self.Prism = _;\n\n\n// Typescript note:\n// The following can be used to import the Token type in JSDoc:\n//\n//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n/**\n * Creates a new token.\n *\n * @param {string} type See {@link Token#type type}\n * @param {string | TokenStream} content See {@link Token#content content}\n * @param {string|string[]} [alias] The alias(es) of the token.\n * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n * @class\n * @global\n * @public\n */\nfunction Token(type, content, alias, matchedStr) {\n\t/**\n\t * The type of the token.\n\t *\n\t * This is usually the key of a pattern in a {@link Grammar}.\n\t *\n\t * @type {string}\n\t * @see GrammarToken\n\t * @public\n\t */\n\tthis.type = type;\n\t/**\n\t * The strings or tokens contained by this token.\n\t *\n\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t *\n\t * @type {string | TokenStream}\n\t * @public\n\t */\n\tthis.content = content;\n\t/**\n\t * The alias(es) of the token.\n\t *\n\t * @type {string|string[]}\n\t * @see GrammarToken\n\t * @public\n\t */\n\tthis.alias = alias;\n\t// Copy of the full string this token was created from\n\tthis.length = (matchedStr || '').length | 0;\n}\n\n/**\n * A token stream is an array of strings and {@link Token Token} objects.\n *\n * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n * them.\n *\n * 1. No adjacent strings.\n * 2. No empty strings.\n *\n *    The only exception here is the token stream that only contains the empty string and nothing else.\n *\n * @typedef {Array<string | Token>} TokenStream\n * @global\n * @public\n */\n\n/**\n * Converts the given token or token stream to an HTML representation.\n *\n * The following hooks will be run:\n * 1. `wrap`: On each {@link Token}.\n *\n * @param {string | Token | TokenStream} o The token or token stream to be converted.\n * @param {string} language The name of current language.\n * @returns {string} The HTML representation of the token or token stream.\n * @memberof Token\n * @static\n */\nToken.stringify = function stringify(o, language) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\tif (Array.isArray(o)) {\n\t\tvar s = '';\n\t\to.forEach(function (e) {\n\t\t\ts += stringify(e, language);\n\t\t});\n\t\treturn s;\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: stringify(o.content, language),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language\n\t};\n\n\tvar aliases = o.alias;\n\tif (aliases) {\n\t\tif (Array.isArray(aliases)) {\n\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t} else {\n\t\t\tenv.classes.push(aliases);\n\t\t}\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = '';\n\tfor (var name in env.attributes) {\n\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t}\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n};\n\n/**\n * @param {RegExp} pattern\n * @param {number} pos\n * @param {string} text\n * @param {boolean} lookbehind\n * @returns {RegExpExecArray | null}\n */\nfunction matchPattern(pattern, pos, text, lookbehind) {\n\tpattern.lastIndex = pos;\n\tvar match = pattern.exec(text);\n\tif (match && lookbehind && match[1]) {\n\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\tvar lookbehindLength = match[1].length;\n\t\tmatch.index += lookbehindLength;\n\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t}\n\treturn match;\n}\n\n/**\n * @param {string} text\n * @param {LinkedList<string | Token>} tokenList\n * @param {any} grammar\n * @param {LinkedListNode<string | Token>} startNode\n * @param {number} startPos\n * @param {RematchOptions} [rematch]\n * @returns {void}\n * @private\n *\n * @typedef RematchOptions\n * @property {string} cause\n * @property {number} reach\n */\nfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\tfor (var token in grammar) {\n\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar patterns = grammar[token];\n\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar patternObj = patterns[j],\n\t\t\t\tinside = patternObj.inside,\n\t\t\t\tlookbehind = !!patternObj.lookbehind,\n\t\t\t\tgreedy = !!patternObj.greedy,\n\t\t\t\talias = patternObj.alias;\n\n\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t}\n\n\t\t\t/** @type {RegExp} */\n\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t) {\n\n\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\tvar match;\n\n\t\t\t\tif (greedy) {\n\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t}\n\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\tpos = p;\n\n\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\tfor (\n\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\tk = k.next\n\t\t\t\t\t) {\n\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t}\n\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t// replace with the new match\n\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t} else {\n\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar from = match.index,\n\t\t\t\t\tmatchStr = match[0],\n\t\t\t\t\tbefore = str.slice(0, from),\n\t\t\t\t\tafter = str.slice(from + matchStr.length);\n\n\t\t\t\tvar reach = pos + str.length;\n\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\trematch.reach = reach;\n\t\t\t\t}\n\n\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\tif (before) {\n\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\tpos += before.length;\n\t\t\t\t}\n\n\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\tif (after) {\n\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t}\n\n\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t// this can only happen if the current pattern is greedy\n\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, {\n\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\treach: reach\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @typedef LinkedListNode\n * @property {T} value\n * @property {LinkedListNode<T> | null} prev The previous node.\n * @property {LinkedListNode<T> | null} next The next node.\n * @template T\n * @private\n */\n\n/**\n * @template T\n * @private\n */\nfunction LinkedList() {\n\t/** @type {LinkedListNode<T>} */\n\tvar head = { value: null, prev: null, next: null };\n\t/** @type {LinkedListNode<T>} */\n\tvar tail = { value: null, prev: head, next: null };\n\thead.next = tail;\n\n\t/** @type {LinkedListNode<T>} */\n\tthis.head = head;\n\t/** @type {LinkedListNode<T>} */\n\tthis.tail = tail;\n\tthis.length = 0;\n}\n\n/**\n * Adds a new node with the given value to the list.\n * @param {LinkedList<T>} list\n * @param {LinkedListNode<T>} node\n * @param {T} value\n * @returns {LinkedListNode<T>} The added node.\n * @template T\n */\nfunction addAfter(list, node, value) {\n\t// assumes that node != list.tail && values.length >= 0\n\tvar next = node.next;\n\n\tvar newNode = { value: value, prev: node, next: next };\n\tnode.next = newNode;\n\tnext.prev = newNode;\n\tlist.length++;\n\n\treturn newNode;\n}\n/**\n * Removes `count` nodes after the given node. The given node will not be removed.\n * @param {LinkedList<T>} list\n * @param {LinkedListNode<T>} node\n * @param {number} count\n * @template T\n */\nfunction removeRange(list, node, count) {\n\tvar next = node.next;\n\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\tnext = next.next;\n\t}\n\tnode.next = next;\n\tnext.prev = node;\n\tlist.length -= i;\n}\n/**\n * @param {LinkedList<T>} list\n * @returns {T[]}\n * @template T\n */\nfunction toArray(list) {\n\tvar array = [];\n\tvar node = list.head.next;\n\twhile (node !== list.tail) {\n\t\tarray.push(node.value);\n\t\tnode = node.next;\n\t}\n\treturn array;\n}\n\n\nif (!_self.document) {\n\tif (!_self.addEventListener) {\n\t\t// in Node.js\n\t\treturn _;\n\t}\n\n\tif (!_.disableWorkerMessageHandler) {\n\t\t// In worker\n\t\t_self.addEventListener('message', function (evt) {\n\t\t\tvar message = JSON.parse(evt.data),\n\t\t\t\tlang = message.language,\n\t\t\t\tcode = message.code,\n\t\t\t\timmediateClose = message.immediateClose;\n\n\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\tif (immediateClose) {\n\t\t\t\t_self.close();\n\t\t\t}\n\t\t}, false);\n\t}\n\n\treturn _;\n}\n\n// Get current script and highlight\nvar script = _.util.currentScript();\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (script.hasAttribute('data-manual')) {\n\t\t_.manual = true;\n\t}\n}\n\nfunction highlightAutomaticallyCallback() {\n\tif (!_.manual) {\n\t\t_.highlightAll();\n\t}\n}\n\nif (!_.manual) {\n\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t// See https://github.com/PrismJS/prism/issues/2102\n\tvar readyState = document.readyState;\n\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t} else {\n\t\tif (window.requestAnimationFrame) {\n\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t}\n\t}\n}\n\nreturn _;\n\n})(_self);\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n*/\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n*/\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n","(function (Prism) {\n\n\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t'important': /!important\\b/i,\n\t\t'function': /[-a-z0-9]+(?=\\()/i,\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\n\t\tPrism.languages.insertBefore('inside', 'attr-value', {\n\t\t\t'style-attr': {\n\t\t\t\tpattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'attr-value': {\n\t\t\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'style': {\n\t\t\t\t\t\t\t\tpattern: /([\"'])[\\s\\S]+(?=[\"']$)/,\n\t\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\t\talias: 'language-css',\n\t\t\t\t\t\t\t\tinside: Prism.languages.css\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'attr-name': /^style/i\n\t\t\t\t}\n\t\t\t}\n\t\t}, markup.tag);\n\t}\n\n}(Prism));\n","Prism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-flags': /[a-z]+$/,\n\t\t\t'regex-delimiter': /^\\/|\\/$/\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\${|}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n","Prism.languages.markup = {\n\t'comment': /<!--[\\s\\S]*?-->/,\n\t'prolog': /<\\?[\\s\\S]+?\\?>/,\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n","(function () {\n\n\tif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t * @type {String}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\n\t/**\n\t * Global exports\n\t */\n\tvar config = Prism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t * @param {Element} element pre element\n\t\t * @param {Number} number line number\n\t\t * @return {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tif (!lineNumberRows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t},\n\n\t\t/**\n\t\t * Resizes the line numbers of the given element.\n\t\t *\n\t\t * This function will not add line numbers. It will only resize existing ones.\n\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.\n\t\t * @returns {void}\n\t\t */\n\t\tresize: function (element) {\n\t\t\tresizeElements([element]);\n\t\t},\n\n\t\t/**\n\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n\t\t * the current viewport.\n\t\t *\n\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n\t\t *\n\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tassumeViewportIndependence: true\n\t};\n\n\t/**\n\t * Resizes the given elements.\n\t *\n\t * @param {HTMLElement[]} elements\n\t */\n\tfunction resizeElements(elements) {\n\t\telements = elements.filter(function (e) {\n\t\t\tvar codeStyles = getStyles(e);\n\t\t\tvar whiteSpace = codeStyles['white-space'];\n\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n\t\t});\n\n\t\tif (elements.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar infos = elements.map(function (element) {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tif (!codeElement || !lineNumbersWrapper) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.innerHTML = '0';\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\treturn {\n\t\t\t\telement: element,\n\t\t\t\tlines: codeLines,\n\t\t\t\tlineHeights: [],\n\t\t\t\toneLinerHeight: oneLinerHeight,\n\t\t\t\tsizer: lineNumberSizer,\n\t\t\t};\n\t\t}).filter(Boolean);\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lines = info.lines;\n\t\t\tvar lineHeights = info.lineHeights;\n\t\t\tvar oneLinerHeight = info.oneLinerHeight;\n\n\t\t\tlineHeights[lines.length - 1] = undefined;\n\t\t\tlines.forEach(function (line, index) {\n\t\t\t\tif (line && line.length > 1) {\n\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));\n\t\t\t\t\te.style.display = 'block';\n\t\t\t\t\te.textContent = line;\n\t\t\t\t} else {\n\t\t\t\t\tlineHeights[index] = oneLinerHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lineHeights = info.lineHeights;\n\n\t\t\tvar childIndex = 0;\n\t\t\tfor (var i = 0; i < lineHeights.length; i++) {\n\t\t\t\tif (lineHeights[i] === undefined) {\n\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');\n\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {\n\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns style declarations for the element\n\t * @param {Element} element\n\t */\n\tvar getStyles = function (element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t};\n\n\tvar lastWidth = undefined;\n\twindow.addEventListener('resize', function () {\n\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n\t\t\treturn;\n\t\t}\n\t\tlastWidth = window.innerWidth;\n\n\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = /** @type {Element} */ (env.element);\n\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.classList.remove(PLUGIN_NAME);\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tpre.classList.add(PLUGIN_NAME);\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\tresizeElements([pre]);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n}());\n"],"sourceRoot":""}